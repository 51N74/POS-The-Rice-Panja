import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

// GET
export async function GET(request, { params }) {
  try {
    const menuID = Number(params.id);

    if (isNaN(menuID)) {
      return NextResponse.json(
        { error: "Invalid menu item ID." },
        { status: 400 },
      );
    }

    const menuItem = await prisma.menuItem.findUnique({
      where: {
        id: menuID,
      },
      include: {
        // images: true, // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        categories: {
          include: {
            menuCategory: true,
          },
        },
      },
    });

    if (!menuItem) {
      return NextResponse.json(
        { error: "Menu item not found" },
        { status: 404 },
      );
    }

    return NextResponse.json(menuItem);
  } catch (error) {
    // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏° Error Handling ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    console.error("Error fetching menu item:", error);
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ error ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏à‡∏∞ return status 500 ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ build ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    return NextResponse.json(
      { error: "Failed to fetch menu item" },
      { status: 500 },
    );
  }
}

// PATCH
export async function PATCH(request, { params }) {
  const { id } = params;

  // ‡πÉ‡∏ä‡πâ try...catch ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô body ‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error
  try {
    const { name, description, price, menuCategory } = await request.json();

    const updatedMenuItem = await prisma.menuItem.update({
      where: { id: parseInt(id) },
      data: {
        name,
        description,
        price,
        menuCategory,
      },
      // ... include options
    });
    return NextResponse.json(updatedMenuItem);
  } catch (error) {
    console.error("Error updating menu item:", error);
    return NextResponse.json(
      { error: "Failed to update menu item" },
      { status: 500 },
    );
  }
}

// DELETE
export async function DELETE(request, { params }) {
  try {
    const menuID = Number(params.id);

    // Check if the menuID is valid
    if (isNaN(menuID)) {
      return NextResponse.json(
        { message: "Invalid menu item ID." },
        { status: 400 },
      );
    }

    const deleteMenu = await prisma.menuItem.delete({
      where: {
        id: menuID,
      },
    });

    return NextResponse.json({ message: "Delete Successful" }, { status: 200 });
  } catch (error) {
    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà delete ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏°‡πà‡∏û‡∏ö ID ‡∏ô‡∏±‡πâ‡∏ô)
    console.error("Error deleting menu item:", error);

    return NextResponse.json(
      { message: "Failed to delete item.", error: error.message },
      { status: 500 },
    );
  }
}
