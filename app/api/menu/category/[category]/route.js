import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";

export const runtime = "nodejs";

export async function GET(req, { params }) {
  const { category } = params;

  try {
    const menuItems = await prisma.menuItem.findMany({
      where: {
        categories: {
          some: {
            menuCategory: {
              name: decodeURIComponent(category), // Match category name
            },
          },
        },
      },
      include: {
        images: true,
        categories: {
          include: {
            menuCategory: true,
          },
        },
      },
    });

    // Convert imageData to Base64 format
    const formattedMenuItems = menuItems.map((item) => ({
      ...item,
      images: item.images.map((image) => {
        // üí° ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ ArrayBuffer / TextDecoder ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Edge Runtime

        // 1. ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Buffer/Uint8Array
        const bufferData = image.imageData;

        // 2. ‡πÅ‡∏õ‡∏•‡∏á Buffer/Uint8Array ‡πÄ‡∏õ‡πá‡∏ô String ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö btoa
        let binary = "";
        const bytes = new Uint8Array(bufferData);
        const len = bytes.byteLength;
        for (let i = 0; i < len; i++) {
          binary += String.fromCharCode(bytes[i]);
        }

        // 3. ‡πÉ‡∏ä‡πâ btoa (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Edge) ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Base64
        const base64Image = btoa(binary);

        return {
          ...image,
          // 4. ‡πÉ‡∏ä‡πâ Base64 String ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
          url: `data:image/jpeg;base64,${base64Image}`,
        };
      }),
    }));

    return NextResponse.json(formattedMenuItems);
  } catch (error) {
    console.error("Error fetching menu items by category:", error);
    return NextResponse.json(
      { error: "Failed to fetch menu items" },
      { status: 500 },
    );
  }
}
