// src/app/api/rooms/[id]/route.js

import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";

// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç 1: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô export const config ‡πÄ‡∏õ‡πá‡∏ô export const runtime ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ dynamic
// ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Build Error ‡πÅ‡∏•‡∏∞ Connection Timeout
export const runtime = "nodejs";
export const dynamic = "force-dynamic";

// üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ô App Router, params ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏ô‡∏≠‡∏≤‡∏£‡πå‡∏Å‡∏¥‡∏ß‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
export async function GET(request, { params }) {
  // Destructure id ‡∏à‡∏≤‡∏Å params
  const { id } = params;

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ id ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    if (!id || isNaN(Number(id))) {
      return NextResponse.json(
        { error: "Invalid or missing Room ID parameter" },
        { status: 400 },
      );
    }

    // ‡πÅ‡∏õ‡∏•‡∏á id ‡πÄ‡∏õ‡πá‡∏ô Number ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Prisma where condition
    const roomId = Number(id);

    const roomOrders = await prisma.room.findUnique({
      where: { id: roomId },
      include: {
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Orders ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏à‡πà‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'pending' ‡∏´‡∏£‡∏∑‡∏≠ 'open')
        orders: {
          where: { status: { not: "Paid" } }, // üí° ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏ö‡∏¥‡∏•
          select: {
            id: true,
            status: true,
            total: true,
            createdAt: true,
            items: {
              select: {
                quantity: true,
                menuItem: {
                  select: {
                    name: true,
                    price: true,
                  },
                },
              },
            },
          },
        },
      },
    });

    if (!roomOrders) {
      return NextResponse.json({ error: "Room not found" }, { status: 404 });
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Orders ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà 'Paid' ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç where ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
    const activeOrders = roomOrders.orders;

    // Summarize the total of all active orders
    const totalAmount = activeOrders.reduce(
      (sum, order) => sum + Number(order.total),
      0,
    );

    // Send summarized data to the frontend
    return NextResponse.json({
      roomId: roomId,
      roomName: roomOrders.name, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠ Room
      totalAmount: totalAmount.toFixed(2), // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      orders: activeOrders,
    });
  } catch (error) {
    console.error("Error fetching room and orders:", error);
    return NextResponse.json(
      { error: "Failed to fetch room and orders" },
      { status: 500 },
    );
  }
}
