"use client";

import React, { useEffect, useState } from "react";
// ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ import Component ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

const TableSelection = ({ onTableSelect }) => {
  const [tables, setTables] = useState(null); // üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å [] ‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ []
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchTables = async () => {
      try {
        // üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏ò API ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: /api/tables (‡∏´‡∏£‡∏∑‡∏≠ /api/table)
        const response = await fetch("/api/tables");

        if (!response.ok) {
          // ‡∏´‡∏≤‡∏Å API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 500 ‡∏´‡∏£‡∏∑‡∏≠ 404
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to fetch tables data.");
        }

        const data = await response.json();

        // üí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (!Array.isArray(data)) {
          console.error("API did not return an array:", data);
          // ‡∏ñ‡πâ‡∏≤ API ‡∏™‡πà‡∏á Object ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£ Render
          setError("Invalid data format received from server.");
          setTables([]); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ß‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Render
          return;
        }

        setTables(data);
      } catch (err) {
        console.error("Fetch Error:", err);
        // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡∏°‡∏µ 500 Error ‡∏ö‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡πÉ‡∏ô UI ‡∏à‡∏∂‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        setError(
          err.message || "Could not load tables. Please check API status.",
        );
        setTables([]); // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Error
      } finally {
        setLoading(false);
      }
    };

    fetchTables();
  }, []);

  // --- ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Loading ‡πÅ‡∏•‡∏∞ Error ---

  if (loading) {
    return (
      <div className="text-center py-8 text-gray-500">Loading tables...</div>
    );
  }

  if (error) {
    return <div className="text-center py-8 text-red-600">Error: {error}</div>;
  }

  // üí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Array ‡∏ß‡πà‡∏≤‡∏á
  if (!tables || tables.length === 0) {
    return (
      <div className="text-center py-8 text-gray-500">No tables available.</div>
    );
  }

  // --- Rendering Tables ---

  return (
    <div>
      <h1 className="text-2xl text-black font-semibold mb-6">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ï‡πä‡∏∞</h1>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 w-full max-w-4xl">
        {/* ‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡πà‡∏≤ tables ‡πÄ‡∏õ‡πá‡∏ô Array ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        {tables.map((table) => (
          <button
            key={table.id}
            onClick={() => onTableSelect(table.id)}
            className={`p-4 rounded-lg shadow-md transition-all
                        ${table.status === "Occupied" ? "bg-red-500 hover:bg-red-600 text-white" : "bg-green-500 hover:bg-green-600 text-white"}`}
          >
            Table {table.id} ({table.status})
          </button>
        ))}
      </div>
    </div>
  );
};

export default TableSelection;
