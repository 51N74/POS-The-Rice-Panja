// src/app/api/checkout/[type]/[id]/route.js (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)

import { NextResponse } from "next/server";
// ‚ö†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ Relative Path ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Module Not Found
import prisma from "@/app/lib/prisma";

export const runtime = "nodejs";
export const dynamic = "force-dynamic";

export async function POST(request, { params }) {
  // üí° ‡∏î‡∏∂‡∏á type ('table' ‡∏´‡∏£‡∏∑‡∏≠ 'room') ‡πÅ‡∏•‡∏∞ id ‡∏à‡∏≤‡∏Å params
  const { type, id } = params;

  if (!type || !id) {
    return NextResponse.json(
      { error: "Location type (table/room) and ID are required" },
      { status: 400 },
    );
  }

  // üí° ‡πÅ‡∏õ‡∏•‡∏á ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö where clause
  const locationId = Number(id);
  if (isNaN(locationId)) {
    return NextResponse.json({ error: "Invalid ID format" }, { status: 400 });
  }

  // üîë ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Prisma Transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Orders ‡πÅ‡∏•‡∏∞ Table/Room
  //    ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (All or Nothing)
  try {
    const result = await prisma.$transaction(async (tx) => {
      // 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Orders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "Paid"
      const orderUpdateResult = await tx.order.updateMany({
        where: {
          // üí° ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏≤‡∏° type
          [type === "table" ? "tableId" : "roomId"]: locationId,
          status: { not: "Paid" }, // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢
        },
        data: { status: "Paid" },
      });

      let locationUpdateResult;

      // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Table ‡∏´‡∏£‡∏∑‡∏≠ Room ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "Available"
      if (type === "table") {
        locationUpdateResult = await tx.table.update({
          where: { id: locationId },
          data: { status: "Available" },
        });
      } else if (type === "room") {
        locationUpdateResult = await tx.room.update({
          where: { id: locationId },
          data: { status: "Available" },
        });
      } else {
        // ‡∏ñ‡πâ‡∏≤ type ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'table' ‡∏´‡∏£‡∏∑‡∏≠ 'room' ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Transaction
        throw new Error("Invalid location type specified.");
      }

      return {
        orderCount: orderUpdateResult.count,
        location: locationUpdateResult,
      };
    });

    // 3. ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    const locationName = type === "table" ? "Table" : "Room";

    return NextResponse.json({
      message: `Checkout successful for ${locationName} ${id}. ${result.orderCount} orders paid.`,
      location: result.location,
    });
  } catch (error) {
    console.error("Checkout Transaction Failed:", error);

    // ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ Transaction ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Error ‡πÉ‡∏î‡πÜ (‡πÄ‡∏ä‡πà‡∏ô Invalid Type ‡∏´‡∏£‡∏∑‡∏≠ DB Error)
    return NextResponse.json(
      { error: "Failed to finalize checkout process.", details: error.message },
      { status: 500 },
    );
  }
}
