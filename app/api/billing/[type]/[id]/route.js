// src/app/api/billing/[type]/[id]/route.js

import { NextResponse } from "next/server";
// ‚ö†Ô∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ Relative Path ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Module Not Found ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Alias
import prisma from "@/app/lib/prisma";

// ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° runtime ‡πÅ‡∏•‡∏∞ dynamic ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Build Error ‡πÅ‡∏•‡∏∞ Connection Timeout
export const runtime = "nodejs";
export const dynamic = "force-dynamic";

export async function GET(request, { params }) {
  // üí° ‡∏î‡∏∂‡∏á type ('table' ‡∏´‡∏£‡∏∑‡∏≠ 'room') ‡πÅ‡∏•‡∏∞ id ‡∏à‡∏≤‡∏Å params
  const { type, id } = params;

  if (!type || !id) {
    return NextResponse.json(
      { error: "Location type (table/room) and ID are required" },
      { status: 400 },
    );
  }

  // üí° ‡πÅ‡∏õ‡∏•‡∏á ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö where clause
  const locationId = Number(id);
  if (isNaN(locationId)) {
    return NextResponse.json({ error: "Invalid ID format" }, { status: 400 });
  }

  // 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Where Clause)
  let whereCondition = {};
  const locationName =
    type === "table" ? "Table" : type === "room" ? "Room" : null;

  if (!locationName) {
    return NextResponse.json(
      { error: "Invalid location type. Must be 'table' or 'room'." },
      { status: 400 },
    );
  }

  if (type === "table") {
    whereCondition = { tableId: locationId };
  } else if (type === "room") {
    whereCondition = { roomId: locationId };
  }

  try {
    // 2. ‡∏î‡∏∂‡∏á Orders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'Paid')
    const orders = await prisma.order.findMany({
      where: {
        ...whereCondition,
        status: { not: "Paid" },
      },
      // 3. Include ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î OrderItems ‡πÅ‡∏•‡∏∞ MenuItem (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ö‡∏¥‡∏•)
      include: {
        items: {
          include: {
            menuItem: true,
          },
        },
      },
    });

    if (orders.length === 0) {
      return NextResponse.json({
        location: `${locationName} ${locationId}`,
        totalAmount: "0.00",
        orders: [],
      });
    }

    // 4. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Total Bill)
    // ‡πÉ‡∏ä‡πâ reduce ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤ total ‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å Order
    const totalAmountDecimal = orders.reduce((sum, order) => {
      // üí° ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Order.total ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô String ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô Float ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°
      // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Decimal Object ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
      return sum + parseFloat(order.total.toString());
    }, 0);

    // 5. ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return NextResponse.json({
      location: `${locationName} ${locationId}`,
      // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
      totalAmount: totalAmountDecimal.toFixed(2),
      orders: orders,
    });
  } catch (error) {
    console.error("Error fetching bill details:", error);
    return NextResponse.json(
      { error: "Failed to retrieve bill details from database." },
      { status: 500 },
    );
  }
}
