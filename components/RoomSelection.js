"use client";
import { useState, useEffect } from "react";

const RoomSelection = ({ onRoomSelect }) => {
  // üí° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á State: ‡πÄ‡∏û‡∏¥‡πà‡∏° loading ‡πÅ‡∏•‡∏∞ error
  const [rooms, setRooms] = useState(null); // ‡πÉ‡∏ä‡πâ null ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠ Fetch ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedRoom, setSelectedRoom] = useState(null);

  // Fetch the rooms from the API
  useEffect(() => {
    const fetchRooms = async () => {
      try {
        const response = await fetch("/api/rooms");

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to fetch room data.");
        }

        const data = await response.json();

        // üîë ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô TypeError: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array
        if (!Array.isArray(data)) {
          console.error("API did not return an array:", data);
          setError("Invalid data format received from server.");
          setRooms([]); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ß‡πà‡∏≤‡∏á
          return;
        }

        setRooms(data);
      } catch (err) {
        console.error("Fetch Error:", err);
        setError(
          err.message || "Could not load rooms. Please check API status.",
        );
        setRooms([]); // ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Error
      } finally {
        setLoading(false);
      }
    };
    fetchRooms();
  }, []);

  const handleRoomSelect = (roomId, status) => {
    // üîë ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
    if (status === "Occupied") return;

    setSelectedRoom(roomId);
    onRoomSelect(roomId); // Call the parent function
  };

  // --- ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Loading ‡πÅ‡∏•‡∏∞ Error ---

  if (loading) {
    return (
      <div className="text-center py-8 text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á...</div>
    );
  }

  if (error) {
    return <div className="text-center py-8 text-red-600">Error: {error}</div>;
  }

  // üí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤ Fetch ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ Array ‡∏ß‡πà‡∏≤‡∏á)
  if (!rooms || rooms.length === 0) {
    return (
      <div className="text-center py-8 text-gray-500">
        ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      </div>
    );
  }

  // --- Rendering Rooms ---
  return (
    <div className="flex flex-col items-center justify-center p-4">
      <h1 className="text-2xl text-black font-semibold mb-6">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á</h1>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 w-full max-w-4xl">
        {rooms.map((room) => (
          <div
            key={room.id}
            // üîë ‡πÉ‡∏ä‡πâ Logic ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å
            onClick={() => handleRoomSelect(room.id, room.status)}
            className={`
                            flex flex-col items-center justify-center p-4 border-2 rounded-lg transition-all
                            ${
                              room.status === "Occupied"
                                ? "bg-red-100 border-red-400 text-red-600 cursor-not-allowed"
                                : "bg-green-500 hover:bg-green-600 text-white cursor-pointer"
                            }
                            ${selectedRoom === room.id ? "ring-4 ring-offset-2 ring-green-700" : ""}
                        `}
          >
            <span className="text-lg font-semibold mb-2 text-center">
              ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà {room.roomNumber}
            </span>
            <span className="text-sm font-light">
              {room.status === "Occupied" ? "‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á" : "‡∏ß‡πà‡∏≤‡∏á"}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

export default RoomSelection;
